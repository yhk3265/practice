from skimage.exposure import rescale_intensity

def convolve(image, kernel, pad, stride):
    # grab the spatial dimensions of the image, along with
    # the spatial dimensions of the kernel
    (iH, iW) = image.shape[:2]
    (kH, kW) = kernel.shape[:2]
    
    # allocate memory for the output image, taking care to
    # "pad" the borders of the input image so the spatial
    # size (i.e., width and height) are not reduced
    #pad = int((kW - 1) / 2)
    image = cv2.copyMakeBorder(image, pad, pad, pad, pad,
        cv2.BORDER_REPLICATE)
    output_widht= int((iW + 2 * pad - kW) / stride + 1)
    output_height=int((iH + 2 * pad - kH) / stride + 1)
    output = np.zeros((output_height, output_widht), dtype="float32")
        # loop over the input image, "sliding" the kernel across
    # each (x, y)-coordinate from left-to-right and top to
    # bottom
    for y in np.arange(pad, iH + pad -kH, stride):
        for x in np.arange(pad, iW + pad - kW, stride):
            # extract the ROI of the image by extracting the
            # *center* region of the current (x, y)-coordinates
            # dimensions
            roi = image[y - pad:y + pad + 1, x - pad:x + pad + 1]
 
            # perform the actual convolution by taking the
            # element-wise multiplicate between the ROI and
            # the kernel, then summing the matrix
            k = (roi * kernel).sum()
 
            # store the convolved value in the output (x,y)-
            # coordinate of the output image
            output[int((y - pad)/stride), int((x - pad)/stride) ] = k
            	# rescale the output image to be in the range [0, 255]
    output = rescale_intensity(output, in_range=(0, 255))
    output = (output * 255).astype("uint8")
    
    # return the output image
    return output


import numpy as np
import cv2 
from matplotlib import pyplot as plt
img = cv2.imread('sachin.jpg')
kernel = np.array([[0, 0, 0],[0,1,0],[0,0,0]])
gray=cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
dst = convolve(img, kernel, 0, 1)


cv2.imshow("original", gray)
cv2.imshow("convolve", dst)
cv2.waitKey(0)
cv2.destroyAllWindows()
